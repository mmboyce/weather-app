{"version":3,"sources":["components/Giphy.js","components/Weather.js","App.js","serviceWorker.js","index.js"],"names":["Giphy","props","state","isLoaded","getData","bind","loadImage","weather","this","weatherData","main","giphyURL","fetch","mode","response","json","data","url","images","original","alt","title","setState","prevProps","undefined","then","id","src","React","Component","roundTemps","temp","Math","round","Weather","cityName","units","retrieved","handleData","handleWeather","handleError","handleUnits","handleSearch","e","target","value","currTemp","storedUnits","err","msg","errCode","message","errMsg","apiURL","ok","Error","status","event","keyCode","catch","type","name","onClick","htmlFor","defaultChecked","placeholder","onKeyDown","temperature","weatherType","location","degrees","App","className","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","console"],"mappings":"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","file":"static/js/main.2035576e.chunk.js","sourcesContent":["import React from 'react'\n\nimport './styles/Giphy.css'\n\nclass Giphy extends React.Component {\n  constructor (props) {\n    super(props)\n    this.state = {\n      isLoaded: false\n    }\n\n    this.getData = this.getData.bind(this)\n    this.loadImage = this.loadImage.bind(this)\n  }\n\n  async getData () {\n    const weather = this.props.weatherData.weather[0].main\n\n    const superSecretApiKeyPlzNoSteal = 'vy6ld9Wo9MZVtkZDxMOtas9GCD2dnaGd'\n    const giphyURL = `https://api.giphy.com/v1/gifs/translate?api_key=${superSecretApiKeyPlzNoSteal}&s=${weather}`\n\n    const response = await fetch(giphyURL, { mode: 'cors' })\n    const data = await response.json()\n\n    return data\n  }\n\n  loadImage (json) {\n    const url = json.data.images.original.url\n    const alt = json.data.title\n\n    this.setState(\n      {\n        url: url,\n        alt: alt,\n        isLoaded: true\n      }\n    )\n  }\n\n  componentDidUpdate (prevProps) {\n    if (prevProps.weatherData !== this.props.weatherData) {\n      this.setState({\n        isLoaded: false\n      })\n    }\n  }\n\n  render () {\n    if (this.props.weatherData !== undefined && !this.state.isLoaded) {\n      this.getData().then(this.loadImage)\n    }\n\n    return (\n      <div id=\"giphy-display\">\n        <img alt={this.state.alt} src={this.state.url} />\n      </div>\n    )\n  }\n}\n\nexport default Giphy\n","import React from 'react'\nimport './styles/Weather.css'\n\nimport Giphy from './Giphy'\n\nfunction roundTemps (temp) {\n  // Round our temperatures to two decimal places at most\n  return Math.round(temp * 100) / 100\n}\n\nclass Weather extends React.Component {\n  constructor (props) {\n    super(props)\n\n    this.state = {\n      cityName: 'New York',\n      units: 'imperial',\n      retrieved: false\n    }\n\n    this.handleData = this.handleData.bind(this)\n    this.handleWeather = this.handleWeather.bind(this)\n    this.handleError = this.handleError.bind(this)\n    this.handleUnits = this.handleUnits.bind(this)\n    this.handleSearch = this.handleSearch.bind(this)\n  }\n\n  handleUnits (e) {\n    const units = e.target.value\n\n    // Convert temperature if user clicks on a different unit\n    // Saves us an API call\n    if (this.state.data !== undefined) {\n      const { data } = this.state\n      const currTemp = data.main.temp\n      const storedUnits = this.state.units\n\n      if (storedUnits === 'metric' && units === 'imperial') {\n        // metric -> imperial\n        data.main.temp = roundTemps((currTemp * (9 / 5)) + 32)\n      } else if (storedUnits === 'imperial' && units === 'metric') {\n        // imperial -> metric\n        data.main.temp = roundTemps((currTemp - 32) * (5 / 9))\n      }\n    }\n\n    this.setState(\n      { units }\n    )\n  }\n\n  handleWeather (json) {\n    this.setState(\n      {\n        retrieved: true,\n        data: json\n      }\n    )\n  }\n\n  handleError (err) {\n    const errCode = err.message\n    let msg\n\n    if (errCode === '429') {\n      msg = 'Too many requests!'\n    } else if (errCode === '404') {\n      msg = 'Looks like you tried a bad city name. Check your spelling :)'\n    } else {\n      msg = `Encountered an error: ${errCode}`\n    }\n\n    this.setState(\n      {\n        retrieved: null,\n        errMsg: msg\n      }\n    )\n  }\n\n  async handleData () {\n    const { cityName, units } = this.state\n\n    const superSecretApiKeyPlzNoSteal = '69329efdd58f9bc2cda118a18ae27b59'\n\n    const apiURL = `https://api.openweathermap.org/data/2.5/weather?q=${cityName}&appid=${superSecretApiKeyPlzNoSteal}&units=${units}`\n    const response = await fetch(apiURL, { mode: 'cors' })\n\n    let data\n\n    if (response.ok) {\n      data = await response.json()\n      return data\n    } else {\n      throw new Error(response.status)\n    }\n  }\n\n  handleSearch (event) {\n    const { keyCode } = event\n\n    if (keyCode === 13) {\n      const cityName = event.target.value\n\n      this.setState(\n        { cityName },\n        () => this.handleData().then(this.handleWeather).catch(this.handleError)\n      )\n    }\n  }\n\n  render () {\n    function WeatherDisplay (props) {\n      let temperature = ''\n      let weatherType = ''\n      let location = ''\n      let degrees = ''\n\n      const { retrieved, data, units, errMsg } = props\n\n      if (retrieved) {\n        location = `In ${data.name}`\n        temperature = `It's ${data.main.temp}`\n        weatherType = `Weather: ${data.weather[0].main}`\n\n        degrees = units === 'metric' ? '째C' : '째F'\n        degrees = `${degrees} outside`\n      } else if (retrieved === null) {\n        temperature = 'Oops!'\n        weatherType = errMsg\n      }\n\n      return (\n        <div id=\"weather-display\">\n          <p>{location}</p>\n          <p>{`${temperature}${degrees}`}</p>\n          <p>{weatherType}</p>\n        </div>\n      )\n    }\n\n    return (\n      <div id=\"weather-container\">\n\n        <div id=\"weather-entries\">\n          <div id=\"temperature-selection\">\n            <input type=\"radio\" name=\"units\" id=\"celsius\" value=\"metric\" onClick={this.handleUnits}/>\n            <label htmlFor=\"celsius\">째C</label>\n            <input defaultChecked type=\"radio\" name=\"units\" id=\"farenheit\" value=\"imperial\" onClick={this.handleUnits}/>\n            <label htmlFor=\"farenheit\">째F</label>\n          </div>\n          <input type=\"text\" id=\"search\" placeholder=\"New York\" onKeyDown={this.handleSearch}/>\n        </div>\n        <WeatherDisplay retrieved={this.state.retrieved} data={this.state.data} units={this.state.units} errMsg={this.state.errMsg} />\n        <Giphy weatherData={this.state.data}/>\n      </div>\n    )\n  }\n}\n\nexport default Weather\n","import React from 'react'\nimport Weather from './components/Weather'\n\nfunction App () {\n  return (\n    <div className=\"App\">\n      <Weather />\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}