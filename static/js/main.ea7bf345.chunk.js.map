{"version":3,"sources":["components/Giphy.js","components/Weather.js","App.js","serviceWorker.js","index.js"],"names":["hidden","display","visible","Giphy","props","state","isRetrieved","loadingStyle","giphyStyle","loadingWait","process","loadingAlt","getData","bind","loadImage","handleLoad","handleError","weather","this","weatherData","main","giphyURL","fetch","mode","response","ok","json","data","Error","status","url","images","original","alt","title","setState","prevProps","err","message","undefined","then","catch","id","style","src","onLoad","React","Component","roundTemps","temp","Math","round","WeatherDisplay","temperature","weatherType","location","degrees","retrieved","units","errMsg","name","Weather","cityName","handleData","handleWeather","handleUnits","handleSearch","e","target","value","currTemp","storedUnits","msg","errCode","apiURL","event","keyCode","type","onClick","htmlFor","defaultChecked","placeholder","onKeyDown","App","className","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","console"],"mappings":"2TAKMA,G,YAAS,CACbC,QAAS,SAGLC,EAAU,CACdD,QAAS,SA4HIE,E,YAlHb,WAAaC,GAAQ,IAAD,8BAClB,4CAAMA,KACDC,MAAQ,CACXC,aAAa,EACbC,aAAcP,EACdQ,WAAYR,EACZS,YAbaC,+BAcbC,WAXa,WAcf,EAAKC,QAAU,EAAKA,QAAQC,KAAb,gBACf,EAAKC,UAAY,EAAKA,UAAUD,KAAf,gBACjB,EAAKE,WAAa,EAAKA,WAAWF,KAAhB,gBAClB,EAAKG,YAAc,EAAKA,YAAYH,KAAjB,gBAbD,E,oMAiBZI,EAAUC,KAAKd,MAAMe,YAAYF,QAAQ,GAAGG,KAEd,mCAC9BC,E,0DAD8B,mC,cACiEJ,G,SAE9EK,MAAMD,EAAU,CAAEE,KAAM,S,YAAzCC,E,QAEOC,G,iCACQD,EAASE,O,cAAtBC,E,yBAECA,G,cAED,IAAIC,MAAMJ,EAASK,Q,uIAIlBH,GACT,IAAMI,EAAMJ,EAAKC,KAAKI,OAAOC,SAASF,IAChCG,EAAMP,EAAKC,KAAKO,MAEtBhB,KAAKiB,SACH,CACEL,IAAKA,EACLG,IAAKA,EACL3B,aAAa,M,yCAKC8B,GACdA,EAAUjB,cAAgBD,KAAKd,MAAMe,aACvCD,KAAKiB,SAAS,CACZ7B,aAAa,EACbC,aAAcL,EACdS,WAvDW,UAwDXH,WAAYR,M,mCAMhBkB,KAAKiB,SAAS,CACZ3B,WAAYN,EACZK,aAAcP,M,kCAILqC,GACXnB,KAAKiB,SAAS,CACZxB,WAAY0B,EAAIC,QArEE,SAsElB7B,YAzEaC,iC,+BAkFf,YAJ+B6B,IAA3BrB,KAAKd,MAAMe,aAA8BD,KAAKb,MAAMC,aACtDY,KAAKN,UAAU4B,KAAKtB,KAAKJ,WAAW2B,MAAMvB,KAAKF,aAI/C,yBAAK0B,GAAG,iBACN,yBACEA,GAAG,UACHC,MAAOzB,KAAKb,MAAME,aAClBqC,IAAK1B,KAAKb,MAAMI,YAChBwB,IAAKf,KAAKb,MAAMM,aAElB,yBACE+B,GAAG,QACHG,OAAQ3B,KAAKH,WACb4B,MAAOzB,KAAKb,MAAMG,WAClByB,IAAKf,KAAKb,MAAM4B,IAChBW,IAAK1B,KAAKb,MAAMyB,W,GA1FNgB,IAAMC,WCb1B,SAASC,EAAYC,GAEnB,OAAOC,KAAKC,MAAa,IAAPF,GAAc,IAGlC,SAASG,EAAgBhD,GACvB,IAAIiD,EAAc,GACdC,EAAc,GACdC,EAAW,GACXC,EAAU,GAENC,EAAmCrD,EAAnCqD,UAAW9B,EAAwBvB,EAAxBuB,KAAM+B,EAAkBtD,EAAlBsD,MAAOC,EAAWvD,EAAXuD,OAchC,OAZkB,IAAdF,GACFF,EAAQ,aAAS5B,EAAKiC,MACtBP,EAAW,eAAW1B,EAAKP,KAAK6B,MAChCK,EAAW,mBAAe3B,EAAKV,QAAQ,GAAGG,MAG1CoC,EAAO,UADPA,EAAoB,WAAVE,EAAqB,QAAO,QAC/B,cACiB,IAAfD,IACTJ,EAAc,QACdC,EAAcK,GAId,yBAAKjB,GAAG,mBACN,2BAAIa,GACJ,qCAAOF,GAAP,OAAqBG,IACrB,2BAAIF,I,IAqKKO,E,YA7Hb,WAAazD,GAAQ,IAAD,8BAClB,4CAAMA,KAEDC,MAAQ,CACXyD,SAAU,WACVJ,MAAO,WACPD,UAAW,GAQb,EAAKM,WAAa,EAAKA,WAAWlD,KAAhB,gBAClB,EAAKmD,cAAgB,EAAKA,cAAcnD,KAAnB,gBACrB,EAAKG,YAAc,EAAKA,YAAYH,KAAjB,gBACnB,EAAKoD,YAAc,EAAKA,YAAYpD,KAAjB,gBACnB,EAAKqD,aAAe,EAAKA,aAAarD,KAAlB,gBAlBF,E,yEAqBPsD,GACX,IAAMT,EAAQS,EAAEC,OAAOC,MAIvB,QAAwB9B,IAApBrB,KAAKb,MAAMsB,KAAoB,CAAC,IAC1BA,EAAST,KAAKb,MAAdsB,KACF2C,EAAW3C,EAAKP,KAAK6B,KACrBsB,EAAcrD,KAAKb,MAAMqD,MAEX,WAAhBa,GAAsC,aAAVb,EAE9B/B,EAAKP,KAAK6B,KAAOD,EAAoB,IAARsB,EAAsB,IAC1B,aAAhBC,GAAwC,WAAVb,IAEvC/B,EAAKP,KAAK6B,KAAOD,EAA8B,EAAI,GAAtBsB,EAAW,MAI5CpD,KAAKiB,SACH,CAAEuB,Y,oCAIShC,GACbR,KAAKiB,SACH,CACEsB,UAAW,EACX9B,KAAMD,M,kCAKCW,GACX,IACImC,EADEC,EAAUpC,EAAIC,QAIlBkC,EADc,QAAZC,EACI,qBACe,QAAZA,EACH,+DAEH,gCAA4BA,GAGjCvD,KAAKiB,SACH,CACEsB,WAAY,EACZE,OAAQa,M,sKAMgBtD,KAAKb,MAAzByD,E,EAAAA,SAAUJ,E,EAAAA,MAEkB,mCAE9BgB,E,4DAA8DZ,E,kBAFhC,mC,kBAEuFJ,G,SACpGpC,MAAMoD,EAAQ,CAAEnD,KAAM,S,YAAvCC,E,QAIOC,G,iCACED,EAASE,O,cAAtBC,E,yBACOA,G,cAED,IAAIC,MAAMJ,EAASK,Q,0IAIf8C,GAAQ,IAAD,OAGnB,GAAgB,KAFIA,EAAZC,QAEY,CAClB,IAAMd,EAAWa,EAAMP,OAAOC,MAE9BnD,KAAKiB,SACH,CAAE2B,aACF,kBAAM,EAAKC,aAAavB,KAAK,EAAKwB,eAAevB,MAAM,EAAKzB,mB,+BAMhE,OACE,yBAAK0B,GAAG,qBAEN,yBAAKA,GAAG,mBACN,yBAAKA,GAAG,yBACN,2BAAOmC,KAAK,QAAQjB,KAAK,QAAQlB,GAAG,UAAU2B,MAAM,SAASS,QAAS5D,KAAK+C,cAC3E,2BAAOc,QAAQ,WAAf,SACA,2BAAOC,gBAAc,EAACH,KAAK,QAAQjB,KAAK,QAAQlB,GAAG,YAAY2B,MAAM,WAAWS,QAAS5D,KAAK+C,cAC9F,2BAAOc,QAAQ,aAAf,UAEF,2BAAOF,KAAK,OAAOnC,GAAG,SAASuC,YAAY,WAAWC,UAAWhE,KAAKgD,gBAExE,kBAACd,EAAD,CAAgBK,UAAWvC,KAAKb,MAAMoD,UAAW9B,KAAMT,KAAKb,MAAMsB,KAAM+B,MAAOxC,KAAKb,MAAMqD,MAAOC,OAAQzC,KAAKb,MAAMsD,SACpH,kBAAC,EAAD,CAAOxC,YAAaD,KAAKb,MAAMsB,Y,GAxHjBmB,IAAMC,WC/DboC,MARf,WACE,OACE,yBAAKC,UAAU,OACb,kBAAC,EAAD,QCMcC,QACW,cAA7BC,OAAO/B,SAASgC,UAEe,UAA7BD,OAAO/B,SAASgC,UAEhBD,OAAO/B,SAASgC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBvD,MAAK,SAAAwD,GACJA,EAAaC,gBAEdxD,OAAM,SAAAyD,GACLC,QAAQD,MAAMA,EAAM5D,c","file":"static/js/main.ea7bf345.chunk.js","sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'\n\nimport './styles/Giphy.css'\n\nconst hidden = {\n  display: 'none'\n}\n\nconst visible = {\n  display: 'block'\n}\n\nconst loadingGif = process.env.PUBLIC_URL + '/img/loading.gif'\nconst loadingErr = process.env.PUBLIC_URL + '/img/error.png'\n\nconst loadingAlt = 'loading'\nconst loadingAltError = 'error!'\n\nclass Giphy extends React.Component {\n  constructor (props) {\n    super(props)\n    this.state = {\n      isRetrieved: false,\n      loadingStyle: hidden,\n      giphyStyle: hidden,\n      loadingWait: loadingGif,\n      loadingAlt: loadingAlt\n    }\n\n    this.getData = this.getData.bind(this)\n    this.loadImage = this.loadImage.bind(this)\n    this.handleLoad = this.handleLoad.bind(this)\n    this.handleError = this.handleError.bind(this)\n  }\n\n  async getData () {\n    const weather = this.props.weatherData.weather[0].main\n\n    const superSecretApiKeyPlzNoSteal = 'vy6ld9Wo9MZVtkZDxMOtas9GCD2dnaGd'\n    const giphyURL = `https://api.giphy.com/v1/gifs/translate?api_key=${superSecretApiKeyPlzNoSteal}&s=${weather}`\n\n    const response = await fetch(giphyURL, { mode: 'cors' })\n\n    if (response.ok) {\n      const data = await response.json()\n\n      return data\n    } else {\n      throw new Error(response.status)\n    }\n  }\n\n  loadImage (json) {\n    const url = json.data.images.original.url\n    const alt = json.data.title\n\n    this.setState(\n      {\n        url: url,\n        alt: alt,\n        isRetrieved: true\n      }\n    )\n  }\n\n  componentDidUpdate (prevProps) {\n    if (prevProps.weatherData !== this.props.weatherData) {\n      this.setState({\n        isRetrieved: false,\n        loadingStyle: visible,\n        loadingAlt: loadingAlt,\n        giphyStyle: hidden\n      })\n    }\n  }\n\n  handleLoad () {\n    this.setState({\n      giphyStyle: visible,\n      loadingStyle: hidden\n    })\n  }\n\n  handleError (err) {\n    this.setState({\n      loadingAlt: err.message + loadingAltError,\n      loadingWait: loadingErr\n    })\n  }\n\n  render () {\n    if (this.props.weatherData !== undefined && !this.state.isRetrieved) {\n      this.getData().then(this.loadImage).catch(this.handleError)\n    }\n\n    return (\n      <div id=\"giphy-display\">\n        <img\n          id=\"loading\"\n          style={this.state.loadingStyle}\n          src={this.state.loadingWait}\n          alt={this.state.loadingAlt}\n        />\n        <img\n          id=\"giphy\"\n          onLoad={this.handleLoad}\n          style={this.state.giphyStyle}\n          alt={this.state.alt}\n          src={this.state.url}\n        />\n      </div>\n    )\n  }\n}\n\n// All we need from weatherData is the type of weather which looks like\n// {\n//   weather: [\n//     {\n//       main: 'Clouds'\n//     }\n//   ]\n// }\nGiphy.propTypes = {\n  weatherData: PropTypes.shape({\n    weather: PropTypes.arrayOf(PropTypes.shape(\n      {\n        main: PropTypes.string.isRequired\n      }).isRequired\n    ).isRequired\n  })\n}\n\nexport default Giphy\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport './styles/Weather.css'\n\nimport Giphy from './Giphy'\n\nfunction roundTemps (temp) {\n  // Round our temperatures to two decimal places at most\n  return Math.round(temp * 100) / 100\n}\n\nfunction WeatherDisplay (props) {\n  let temperature = ''\n  let weatherType = ''\n  let location = ''\n  let degrees = ''\n\n  const { retrieved, data, units, errMsg } = props\n\n  if (retrieved === 1) {\n    location = `In ${data.name}`\n    temperature = `It's ${data.main.temp}`\n    weatherType = `Weather: ${data.weather[0].main}`\n\n    degrees = units === 'metric' ? '°C' : '°F'\n    degrees = `${degrees} outside`\n  } else if (retrieved === -1) {\n    temperature = 'Oops!'\n    weatherType = errMsg\n  }\n\n  return (\n    <div id=\"weather-display\">\n      <p>{location}</p>\n      <p>{`${temperature}${degrees}`}</p>\n      <p>{weatherType}</p>\n    </div>\n  )\n}\n\nWeatherDisplay.propTypes = {\n  retrieved: PropTypes.oneOf(\n    [\n      -1,\n      0,\n      1\n    ]\n  ).isRequired,\n  data: PropTypes.shape(\n    {\n      weather: PropTypes.arrayOf(\n        PropTypes.shape(\n          {\n            main: PropTypes.string\n          }\n        )\n      ),\n      main: PropTypes.shape(\n        {\n          temp: PropTypes.number\n        }\n      ),\n      name: PropTypes.string\n    }\n  ),\n  units: PropTypes.oneOf(\n    [\n      'metric',\n      'imperial'\n    ]\n  ),\n  errMsg: PropTypes.string\n}\n\nclass Weather extends React.Component {\n  constructor (props) {\n    super(props)\n\n    this.state = {\n      cityName: 'New York',\n      units: 'imperial',\n      retrieved: 0\n      /*\n        retrieved = -1 : error\n        retrieved =  0 : false, not yet retrieved\n        retrievied = 1 :\n       */\n    }\n\n    this.handleData = this.handleData.bind(this)\n    this.handleWeather = this.handleWeather.bind(this)\n    this.handleError = this.handleError.bind(this)\n    this.handleUnits = this.handleUnits.bind(this)\n    this.handleSearch = this.handleSearch.bind(this)\n  }\n\n  handleUnits (e) {\n    const units = e.target.value\n\n    // Convert temperature if user clicks on a different unit\n    // Saves us an API call\n    if (this.state.data !== undefined) {\n      const { data } = this.state\n      const currTemp = data.main.temp\n      const storedUnits = this.state.units\n\n      if (storedUnits === 'metric' && units === 'imperial') {\n        // metric -> imperial\n        data.main.temp = roundTemps((currTemp * (9 / 5)) + 32)\n      } else if (storedUnits === 'imperial' && units === 'metric') {\n        // imperial -> metric\n        data.main.temp = roundTemps((currTemp - 32) * (5 / 9))\n      }\n    }\n\n    this.setState(\n      { units }\n    )\n  }\n\n  handleWeather (json) {\n    this.setState(\n      {\n        retrieved: 1,\n        data: json\n      }\n    )\n  }\n\n  handleError (err) {\n    const errCode = err.message\n    let msg\n\n    if (errCode === '429') {\n      msg = 'Too many requests!'\n    } else if (errCode === '404') {\n      msg = 'Looks like you tried a bad city name. Check your spelling :)'\n    } else {\n      msg = `Encountered an error: ${errCode}`\n    }\n\n    this.setState(\n      {\n        retrieved: -1,\n        errMsg: msg\n      }\n    )\n  }\n\n  async handleData () {\n    const { cityName, units } = this.state\n\n    const superSecretApiKeyPlzNoSteal = '69329efdd58f9bc2cda118a18ae27b59'\n\n    const apiURL = `https://api.openweathermap.org/data/2.5/weather?q=${cityName}&appid=${superSecretApiKeyPlzNoSteal}&units=${units}`\n    const response = await fetch(apiURL, { mode: 'cors' })\n\n    let data\n\n    if (response.ok) {\n      data = await response.json()\n      return data\n    } else {\n      throw new Error(response.status)\n    }\n  }\n\n  handleSearch (event) {\n    const { keyCode } = event\n\n    if (keyCode === 13) {\n      const cityName = event.target.value\n\n      this.setState(\n        { cityName },\n        () => this.handleData().then(this.handleWeather).catch(this.handleError)\n      )\n    }\n  }\n\n  render () {\n    return (\n      <div id=\"weather-container\">\n\n        <div id=\"weather-entries\">\n          <div id=\"temperature-selection\">\n            <input type=\"radio\" name=\"units\" id=\"celsius\" value=\"metric\" onClick={this.handleUnits}/>\n            <label htmlFor=\"celsius\">°C</label>\n            <input defaultChecked type=\"radio\" name=\"units\" id=\"farenheit\" value=\"imperial\" onClick={this.handleUnits}/>\n            <label htmlFor=\"farenheit\">°F</label>\n          </div>\n          <input type=\"text\" id=\"search\" placeholder=\"New York\" onKeyDown={this.handleSearch}/>\n        </div>\n        <WeatherDisplay retrieved={this.state.retrieved} data={this.state.data} units={this.state.units} errMsg={this.state.errMsg} />\n        <Giphy weatherData={this.state.data}/>\n      </div>\n    )\n  }\n}\n\nexport default Weather\n","import React from 'react'\nimport Weather from './components/Weather'\n\nfunction App () {\n  return (\n    <div className=\"App\">\n      <Weather />\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}